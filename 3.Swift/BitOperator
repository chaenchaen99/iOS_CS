## bit operator
비트 연산자
컴퓨터 프로세서는 2진수로 동작한다. 비트라고 부르는 연속된 0과 1들이다.
8개의 비트가 모이면 바이트가 된다.

not 비트 연산
not은 틸드(~)문자로 표현되며, 숫자의 모든 비트를 반대로 만든다.

00000011 NOT
========
11111100

따라서 다음의 스위프트 코드는 -4의 값이 된다.
let y = 3
let z = ~y
print("Result is \(z)")

AND 비트 연산
AND 는 앰퍼샌드(&) 문자로 표현되며, 두개의 숫자를 비트 단위로 비교한다. 
두 숫자의 2진수를 가지고 서로 해당하는 위치의 비트가 모두 1이면 1이 된다.
만약 해당 비트에 0이 있다면 그 결과는 0이 된다.

10101011 AND
00000011
========
00000011

OR 비트 연산
OR 역시 두개의 2진수를 비트 단위로 비교하는 작업을 한다.
AND 연산과는 달리, OR은 두개의 피연산자 중 하나라도 1이 있으면 1의 결과를 만든다.
이 연산자는 하나의 수직바 (|)문자로 표현된다.

10101011 OR
00000011
========
10101011

XOR 비트 연산
일반적으로 '배타적 논리합' 이라고 부르는 XOR은 캐럿(^)문자로 표현되며, OR연산과 비슷한 작업을 한다.
다만 두개의 비트 중 하나만 1일 경우에 1이 된다.
만약 두개 비트 모두 1이거나 0이면 해당 비트는 0으로 설정된다.

10101011 XOR
00000011
========
10101000

